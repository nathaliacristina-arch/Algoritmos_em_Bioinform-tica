# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/nathaliacristina-arch/Algoritmos_em_Bioinform-tica/blob/main/Atividade_8.ipynb
"""

# Parte 1 - Faça o código e gere a matriz de programação dinâmica do problema da Mochila 0/1

# Problema da Mochila:

# Wmax = 13 kg (máxima carga da Mochila)

# item i 	Valor V ($)	Peso w (kg)
# 1	5,00	5
# 2	4,00	6
# 3	7,00	8
# 4	7,00	4

# Mochila


# Parte 2 - Ache a solução do problema da mochila. Submeta código e solução.

def knapsack_01(values, weights, max_weight):
    n = len(values)
    dp = [[0] * (max_weight + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, max_weight + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][max_weight]

# Dados do problema
values = [5, 4, 7, 7]
weights = [5, 6, 8, 4]
max_weight = 13

max_value = knapsack_01(values, weights, max_weight)
print("Valor máximo que pode ser obtido:", max_value) #valor máximo alcançado ao selecionar um conjunto de itens cuja soma dos pesos não exceda 13 kg