# -*- coding: utf-8 -*-
"""Atividade_3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UiKTXXaY0nFzHuefL2voa846X7H3sS44
"""

# Problema:

# Pegue um dos 8 segmentos da Influenza H3N2 e converta para RNA. Salve a sequência de RNA em arquivo no formato fasta, acrescentando no cabeçalho que a sequência foi convertida para RNA. Pegue a sequência convertida para RNA e faça a tradução para sequência de Amino-ácidos proteína na codificação de 1 letra - somente do 1o. frame.

# Envie:
# 1 - Algoritmo
# Parte 1 -  uma sequência da H3N2 (sem utilizar as funções transcribe() e translate())
# 2 - Código para transcrever um segmento em RNA e Aminoácido. Gravar ambos os aquivos em formato fasta.
# 3 - Arquivos fasta com sequência de RNA e   Amino-ácidos/Proteína - somente 1o. frame

# Parte 2 - Todas as sequências H3N2
# 4 - Código utilizando as funções transcribe() e translate(). Aplicar para o Genoma todos
# 5 - Arquivo no formato fasta com sequências de RNA de todos os segmentos. Comentar nos cabeçalhos que são transcrito para RNA.

# 6 (alterado em 11/04/2023) -  Arquivos no formato fasta com as sequências de Aminoácidos/Protein traduzidas para os 6 frames. Enviar 6 arquivos, cada um com as sequências de Aminoácidos/Proteínas para cada um dos frames de tradução. Não parar a tradução no codon de stop. Converta toda a sequência dos segmentos para Aminoácidos. Não se preocupem em identificar regiões dos segmentos que são potencialmente codificadores de proteína (região entre códon iniciador e terminador).

# Parte 3
# 7 -Descrever e discutir a diferença entre o uso das funções de transcrIBE e translate na análise das sequências no genoma da H3N2

# abrindo o arquivo fasta e lendo a sequência de nucleotídeos
with open("Influenza H3N2 (1).fasta") as f:
    lines = f.readlines()

# criando uma string com a sequência de nucleotídeos
seq_nucleotideos = ''.join(lines[1:]).replace('\n', '')

# convertendo a sequência de nucleotídeos para RNA
seq_rna = seq_nucleotideos.replace('T', 'U')

# função para traduzir um códon em um aminoácido
def traduzir_codon(codon):
    tabela_codons = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',
        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',
        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',
        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',
        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',
        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',
        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',
        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',
        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'
    }
    return tabela_codons[codon]

# função para traduzir a sequência de RNA em uma sequência de aminoácidos
def traduzir_rna(seq_rna):
    seq_amino = ''
    for i in range(0, len(seq_rna)-2, 3):
        codon = seq_rna[i:i+3]
        seq_am

