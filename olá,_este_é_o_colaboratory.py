# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/nathaliacristina-arch/Algoritmos_em_Bioinform-tica/blob/main/Atividade_7.ipynb
"""

# Alinhamento pareado de sequências de nucleotídeos
# Desenvolva um algoritmo e código que calcule o escore utilizando as Matriz identidade (Fig. 1) e a Matriz de escore (Fig. 2).
# Figura 1 - Matriz de Identidade
# Figura 1. Matriz identidade (utilize zero para gaps).

# Figura 2. Matriz de escore para nucleotídeos.
# Figura 2. Matriz de escore para nucleotídeos.

# Calcule o escore total e escore por nucleotídeos para a análise pareada das sequências, já alinhadas, no arquivo fasta: Seq1Seq2.txt

# Compare os resultados obtidos com aqueles utilizando o módulo  "Bio.pairwise2"

# Faça uma avaliação (com comentário) sobre os resultados de escore obtidos das duas matrizes de escore (substituição).

# Submeter:

# 1) Código para o cálculo das sequências já alinhadas com as matrizes de identidade e escore dadas, mostrando a comparação entre Seq1 e Seq2; alinhamento utilizando o módulo Bio.pairwise2 (calculo o escore) e format_alignment. (https://biopython.org/docs/1.75/api/Bio.pairwise2.html)

# 2) Valor da identidade utilizando a matriz identidade (Identidade em porcentagm: identidade média x 100); Valor do escore utilizando a matriz de escore (Escore total e escore médio)

# 3) Interpretação dos resultados. Compare com os resultados obtidos com o módulo "Bio.pairwise2". Interpretação deve levar em consideração o algoritmo e matriz de escore utilizado em Bio.pairwise2.  O resultado foi similar ou muito diferente? Porque?

identity_matrix = {
    'A': {'A': 1, 'C': 0, 'G': 0, 'T': 0, '-': 0},
    'C': {'A': 0, 'C': 1, 'G': 0, 'T': 0, '-': 0},
    'G': {'A': 0, 'C': 0, 'G': 1, 'T': 0, '-': 0},
    'T': {'A': 0, 'C': 0, 'G': 0, 'T': 1, '-': 0},
    '-': {'A': 0, 'C': 0, 'G': 0, 'T': 0, '-': 0}
}

score_matrix = {
    'A': {'A':  5, 'C': -1, 'G': -2, 'T': -1, '-': -3},
    'C': {'A': -1, 'C':  5, 'G': -3, 'T': -2, '-': -4},
    'G': {'A': -2, 'C': -3, 'G':  5, 'T': -2, '-': -2},
    'T': {'A': -1, 'C': -2, 'G': -2, 'T':  5, '-': -1},
    '-': {'A': -3, 'C': -4, 'G': -2, 'T': -1, '-':  0}
}

def calculate_identity(sequence):
    identity = 0
    total = 0
    for i in range(len(sequence)):
        for j in range(len(sequence)):
            identity += identity_matrix[sequence[i]][sequence[j]]
            total += 1
    return (identity / total) * 100

def calculate_score(sequence):
    score = 0
    for i in range(len(sequence)):
        score += score_matrix[sequence[i]][sequence[i]]
    return score, score / len(sequence)

def save_to_fasta(title, sequence, identity, score, file):
    file.write(f'{title}\n')
    file.write(f'{sequence}\n')
    file.write(f'Identidade: {identity:.2f}%\n')
    file.write(f'Escore total: {score[0]}\n')
    file.write(f'Escore médio: {score[1]:.2f}\n\n')

# Leitura das sequências já alinhadas do arquivo
sequences = []
current_sequence = ""
with open('Seq1Seq2_corrigido.txt', 'r') as file:
    for line in file:
        line = line.strip()
        if line.startswith('>'):
            if current_sequence:
                sequences.append(current_sequence)
            current_sequence = ""
            title = line[1:]  # Remover o caractere ">" do título
        else:
            current_sequence += line
    if current_sequence:
        sequences.append(current_sequence)

# Cálculo da identidade e do escore para cada sequência
results = []
for i, sequence in enumerate(sequences):
    identity = calculate_identity(sequence)
    score = calculate_score(sequence)
    results.append((f'Seq{i+1}', sequence, identity, score))

# Salvando os resultados em um arquivo fasta
with open('resultado.fasta', 'w') as file:
    for result in results:
        save_to_fasta(result[0], result[1], result[2], result[3], file)

!pip install Biopython

from Bio import pairwise2
from Bio.pairwise2 import format_alignment

identity_matrix = {
    'A': {'A': 1, 'C': 0, 'G': 0, 'T': 0, '-': 0},
    'C': {'A': 0, 'C': 1, 'G': 0, 'T': 0, '-': 0},
    'G': {'A': 0, 'C': 0, 'G': 1, 'T': 0, '-': 0},
    'T': {'A': 0, 'C': 0, 'G': 0, 'T': 1, '-': 0},
    '-': {'A': 0, 'C': 0, 'G': 0, 'T': 0, '-': 0}
}

score_matrix = {
    'A': {'A':  5, 'C': -1, 'G': -2, 'T': -1, '-': -3},
    'C': {'A': -1, 'C':  5, 'G': -3, 'T': -2, '-': -4},
    'G': {'A': -2, 'C': -3, 'G':  5, 'T': -2, '-': -2},
    'T': {'A': -1, 'C': -2, 'G': -2, 'T':  5, '-': -1},
    '-': {'A': -3, 'C': -4, 'G': -2, 'T': -1, '-':  0}
}

def calculate_identity(sequence):
    identity = 0
    total = 0
    for i in range(len(sequence)):
        for j in range(len(sequence)):
            identity += identity_matrix[sequence[i]][sequence[j]]
            total += 1
    return (identity / total) * 100

def calculate_score(sequence):
    score = 0
    for i in range(len(sequence)):
        score += score_matrix[sequence[i]][sequence[i]]
    return score

def save_to_fasta(title, sequence, alignment, score, file):
    file.write(f'>{title}\n')
    file.write(f'{sequence}\n')
    file.write(f'Alignment:\n{alignment}\n')
    file.write(f'Score Total: {score}\n\n')

# Leitura das sequências já alinhadas do arquivo
sequences = []
current_sequence = ""
with open('Seq1Seq2_corrigido.txt', 'r') as file:
    for line in file:
        line = line.strip()
        if line.startswith('>'):
            if current_sequence:
                sequences.append(current_sequence)
            current_sequence = ""
        else:
            current_sequence += line
    if current_sequence:
        sequences.append(current_sequence)


# Obtendo as sequências individualmente
sequence1 = sequences[0]
sequence2 = sequences[1]

# Alinhamento das sequências utilizando o módulo Bio.pairwise2
alignments = pairwise2.align.globalms(sequence1, sequence2, 5, -4, -3, -1)
best_alignment = alignments[0]
best_alignment_string = format_alignment(*best_alignment)
best_score = best_alignment[2]

# Cálculo da identidade para cada sequência
identity1 = calculate_identity(sequence1)
identity2 = calculate_identity(sequence2)

# Salvando os resultados em um arquivo fasta
with open('resultado_Bio.fasta', 'w') as file:
    save_to_fasta('Seq1', sequence1, best_alignment_string, best_score, file)
    save_to_fasta('Seq2', sequence2, best_alignment_string, best_score, file)